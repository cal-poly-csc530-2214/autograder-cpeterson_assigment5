harness void arbitrary_length(int n, int[n] x){
   // get results
   int[n] test = student_solution(n, x);
   int[n] actual = reference_solution(n, x);

   // check correctness
   for (int i = 0; i < n; i++){
      assert test[i] == actual[i];
   }
}

// correct version
int[n] reference_solution(int n, int[n] x){
   int[n] results;
   for (int i = 0; i < n; i++){
      results[i] = x[i] + 1;
   }
   
   return results;
}

// student version
int[n] student_solution(int n, int[n] x){
   int[n] results;
   for (int i = offByOne(1); i < n; i++){
      results[i] = correctOperator(x[i], offByOne2(1));
   }
   
   return results;
}

//possible errors
int offByOne(int x){
   if (??) return x;
   if (??) return x - 1;

   return x + 1;
}

int offByOne2(int x){
   if (??) return x;
   if (??) return x - 1;

   return x + 1;
}

int correctOperator(int x, int y){
   if (??) return x - y;
   if (??) return x + y;
   if (??) return x * y;
   
   return x / y;
}